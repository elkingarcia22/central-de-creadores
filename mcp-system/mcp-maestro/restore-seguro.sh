#!/bin/bash

# üöÄ SCRIPT DE RESTAURACI√ìN SEGURA - GITHUB
# Permite restaurar r√°pidamente el proyecto a un estado seguro

echo "üîí SCRIPT DE RESTAURACI√ìN SEGURA ACTIVADO"
echo "=========================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üìã COMANDOS DISPONIBLES:${NC}"
    echo ""
    echo -e "${GREEN}1. Ver estado actual:${NC}"
    echo "   ./restore-seguro.sh status"
    echo ""
    echo -e "${GREEN}2. Ver puntos de restauraci√≥n:${NC}"
    echo "   ./restore-seguro.sh points"
    echo ""
    echo -e "${GREEN}3. Restaurar a un commit espec√≠fico:${NC}"
    echo "   ./restore-seguro.sh restore <commit-hash>"
    echo ""
    echo -e "${GREEN}4. Restaurar a un tag de seguridad:${NC}"
    echo "   ./restore-seguro.sh tag <tag-name>"
    echo ""
    echo -e "${GREEN}5. Cambiar a rama de backup:${NC}"
    echo "   ./restore-seguro.sh backup"
    echo ""
    echo -e "${GREEN}6. Crear punto de seguridad:${NC}"
    echo "   ./restore-seguro.sh save"
    echo ""
    echo -e "${GREEN}7. Ver historial de cambios:${NC}"
    echo "   ./restore-seguro.sh history"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: La restauraci√≥n puede perder cambios no guardados${NC}"
}

# Funci√≥n para mostrar estado actual
show_status() {
    echo -e "${BLUE}üìä ESTADO ACTUAL DEL PROYECTO:${NC}"
    echo "=========================================="
    git status --short
    echo ""
    echo -e "${BLUE}üìç RAMA ACTUAL:${NC}"
    git branch --show-current
    echo ""
    echo -e "${BLUE}üîÑ √öLTIMO COMMIT:${NC}"
    git log --oneline -1
}

# Funci√≥n para mostrar puntos de restauraci√≥n
show_points() {
    echo -e "${BLUE}üîí PUNTOS DE RESTAURACI√ìN DISPONIBLES:${NC}"
    echo "================================================"
    echo ""
    echo -e "${GREEN}üìã TAGS DE SEGURIDAD:${NC}"
    git tag -l | grep -E "(PUNTO-SEGURO|SECURE-POINT|SAFE-POINT)" | head -10
    echo ""
    echo -e "${GREEN}üìã COMMITS RECIENTES:${NC}"
    git log --oneline -10
    echo ""
    echo -e "${GREEN}üìã RAMAS DE BACKUP:${NC}"
    git branch -a | grep -E "(backup|develop)"
}

# Funci√≥n para restaurar a un commit
restore_commit() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Error: Debes especificar un commit hash${NC}"
        echo "Uso: ./restore-seguro.sh restore <commit-hash>"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Esto restaurar√° el proyecto al commit $1${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Todos los cambios posteriores se perder√°n${NC}"
    echo ""
    read -p "¬øEst√°s seguro? (s/N): " confirm
    
    if [[ $confirm == [sS] ]]; then
        echo -e "${BLUE}üîÑ Restaurando al commit $1...${NC}"
        git reset --hard "$1"
        echo -e "${GREEN}‚úÖ Restauraci√≥n completada${NC}"
    else
        echo -e "${YELLOW}‚ùå Restauraci√≥n cancelada${NC}"
    fi
}

# Funci√≥n para restaurar a un tag
restore_tag() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Error: Debes especificar un tag${NC}"
        echo "Uso: ./restore-seguro.sh tag <tag-name>"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: Esto restaurar√° el proyecto al tag $1${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Todos los cambios posteriores se perder√°n${NC}"
    echo ""
    read -p "¬øEst√°s seguro? (s/N): " confirm
    
    if [[ $confirm == [sS] ]]; then
        echo -e "${BLUE}üîÑ Restaurando al tag $1...${NC}"
        git checkout "$1"
        echo -e "${GREEN}‚úÖ Restauraci√≥n al tag completada${NC}"
        echo -e "${YELLOW}üí° Para volver a main: git checkout main${NC}"
    else
        echo -e "${YELLOW}‚ùå Restauraci√≥n cancelada${NC}"
    fi
}

# Funci√≥n para cambiar a rama de backup
switch_backup() {
    echo -e "${BLUE}üîÑ Cambiando a rama de backup...${NC}"
    git checkout backup/estado-estable
    echo -e "${GREEN}‚úÖ Cambio a rama de backup completado${NC}"
    echo -e "${YELLOW}üí° Para volver a main: git checkout main${NC}"
}

# Funci√≥n para crear punto de seguridad
create_save_point() {
    echo -e "${BLUE}üîí Creando punto de seguridad...${NC}"
    timestamp=$(date +%Y%m%d-%H%M%S)
    tag_name="PUNTO-SEGURO-$(date +%Y%m%d-%H%M%S)"
    
    git add .
    git commit -m "üîí Punto de seguridad autom√°tico: $timestamp"
    git tag "$tag_name"
    
    echo -e "${GREEN}‚úÖ Punto de seguridad creado: $tag_name${NC}"
    echo -e "${BLUE}üí° Para restaurar: ./restore-seguro.sh tag $tag_name${NC}"
}

# Funci√≥n para mostrar historial
show_history() {
    echo -e "${BLUE}üìö HISTORIAL DE CAMBIOS:${NC}"
    echo "================================"
    git log --oneline --graph --decorate -20
}

# Funci√≥n principal
main() {
    case "$1" in
        "status")
            show_status
            ;;
        "points")
            show_points
            ;;
        "restore")
            restore_commit "$2"
            ;;
        "tag")
            restore_tag "$2"
            ;;
        "backup")
            switch_backup
            ;;
        "save")
            create_save_point
            ;;
        "history")
            show_history
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando no reconocido: $1${NC}"
            echo "Usa './restore-seguro.sh help' para ver comandos disponibles"
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
