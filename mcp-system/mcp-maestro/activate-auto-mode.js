#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import chalk from 'chalk';

// Cargar configuraci√≥n autom√°tica
const configPath = path.join(process.cwd(), 'auto-config.json');
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

console.log(chalk.green('ü§ñ MCP Maestro iniciando en modo autom√°tico...'));

// Modificar el comportamiento del servidor para modo autom√°tico
const originalServerPath = path.join(process.cwd(), 'server.js');
let serverCode = fs.readFileSync(originalServerPath, 'utf8');

// Agregar configuraci√≥n autom√°tica al servidor
const autoConfigInjection = `
// CONFIGURACI√ìN AUTOM√ÅTICA INYECTADA
const AUTO_CONFIG = ${JSON.stringify(config, null, 2)};

// Modificar comportamiento para modo autom√°tico
if (AUTO_CONFIG.autoMode) {
  console.log(chalk.blue('üéØ MODO AUTOM√ÅTICO ACTIVADO'));
  console.log(chalk.cyan('‚úÖ Sin confirmaciones - ejecuci√≥n autom√°tica'));
  console.log(chalk.cyan('‚úÖ Auto-commit activado'));
  console.log(chalk.cyan('‚úÖ Auto-backup activado'));
  console.log(chalk.cyan('‚úÖ Auto-recuperaci√≥n de contexto activada'));
}

`;

// Insertar configuraci√≥n autom√°tica al inicio de la clase
serverCode = serverCode.replace(
  'class MCPMaestroServer {',
  `class MCPMaestroServer {
  ${autoConfigInjection}`
);

// Guardar servidor modificado
fs.writeFileSync(originalServerPath, serverCode);

console.log(chalk.green('‚úÖ MCP Maestro configurado en modo autom√°tico'));
console.log(chalk.blue('üéØ El servidor ahora funcionar√° sin confirmaciones'));
