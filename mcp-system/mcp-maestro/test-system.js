#!/usr/bin/env node

/**
 * Script de prueba para verificar el funcionamiento del MCP Maestro
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üéØ Probando Sistema MCP Maestro...');
console.log('==================================');

// 1. Verificar estructura de directorios
console.log('\nüìÅ 1. Verificando estructura de directorios...');
const requiredDirs = [
  'mcp-system/mcp-maestro',
  'mcp-system/mcp-maestro/storage',
  'mcp-system/mcp-maestro/tools',
  'mcp-system/mcp-maestro/scripts',
  'backups'
];

requiredDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    console.log(`‚úÖ ${dir}`);
  } else {
    console.log(`‚ùå ${dir} - NO EXISTE`);
  }
});

// 2. Verificar archivos cr√≠ticos
console.log('\nüìÑ 2. Verificando archivos cr√≠ticos...');
const requiredFiles = [
  'mcp-system/auto-commit.js',
  'mcp-system/mcp-maestro/server.js',
  'mcp-system/mcp-maestro/tools/change-manager.js',
  'mcp-system/mcp-maestro/scripts/manage-changes.js',
  '.git/hooks/pre-commit'
];

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - NO EXISTE`);
  }
});

// 3. Verificar estado de Git
console.log('\nüîó 3. Verificando estado de Git...');
try {
  const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
  const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
  
  console.log(`‚úÖ Branch actual: ${branch}`);
  console.log(`üìù Archivos modificados: ${gitStatus.split('\n').filter(line => line.trim()).length}`);
  
  if (gitStatus.trim()) {
    console.log('üìã Cambios pendientes:');
    gitStatus.split('\n').filter(line => line.trim()).forEach(line => {
      console.log(`   ${line}`);
    });
  } else {
    console.log('‚úÖ No hay cambios pendientes');
  }
} catch (error) {
  console.log('‚ùå Error verificando Git:', error.message);
}

// 4. Verificar permisos de ejecuci√≥n
console.log('\nüîß 4. Verificando permisos de ejecuci√≥n...');
const executableFiles = [
  'mcp-system/auto-commit.js',
  'mcp-system/mcp-maestro/scripts/manage-changes.js',
  '.git/hooks/pre-commit'
];

executableFiles.forEach(file => {
  try {
    const stats = fs.statSync(file);
    if (stats.mode & 0o111) {
      console.log(`‚úÖ ${file} - Ejecutable`);
    } else {
      console.log(`‚ö†Ô∏è ${file} - No ejecutable`);
    }
  } catch (error) {
    console.log(`‚ùå ${file} - Error verificando permisos`);
  }
});

// 5. Probar funcionalidad b√°sica
console.log('\nüß™ 5. Probando funcionalidad b√°sica...');

// Probar el script de gesti√≥n de cambios
try {
  const helpOutput = execSync('node mcp-system/mcp-maestro/scripts/manage-changes.js help', { encoding: 'utf8' });
  console.log('‚úÖ Script de gesti√≥n de cambios funciona');
} catch (error) {
  console.log('‚ùå Error en script de gesti√≥n de cambios:', error.message);
}

// Verificar estado del sistema
try {
  const statusOutput = execSync('node mcp-system/mcp-maestro/scripts/manage-changes.js status', { encoding: 'utf8' });
  console.log('‚úÖ Verificaci√≥n de estado funciona');
} catch (error) {
  console.log('‚ùå Error verificando estado:', error.message);
}

// 6. Resumen final
console.log('\nüìä RESUMEN DEL SISTEMA:');
console.log('========================');
console.log('üéØ MCP Maestro est√° configurado y listo para usar');
console.log('');
console.log('üí° Comandos disponibles:');
console.log('   node mcp-system/mcp-maestro/scripts/manage-changes.js status');
console.log('   node mcp-system/mcp-maestro/scripts/manage-changes.js backup "Descripci√≥n"');
console.log('   node mcp-system/mcp-maestro/scripts/manage-changes.js commit "Mensaje"');
console.log('   node mcp-system/mcp-maestro/scripts/manage-changes.js undo');
console.log('   node mcp-system/mcp-maestro/scripts/manage-changes.js history');
console.log('');
console.log('üîÑ El sistema autom√°ticamente:');
console.log('   - Crea backups antes de commits');
console.log('   - Permite deshacer cambios');
console.log('   - Mantiene historial de cambios');
console.log('   - Sincroniza con MCPs especializados');
console.log('');
console.log('‚úÖ ¬°Sistema MCP Maestro activado exitosamente!');
