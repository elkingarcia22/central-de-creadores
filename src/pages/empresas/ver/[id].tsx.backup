import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { GetServerSideProps } from 'next';
import { useRol } from '../../../contexts/RolContext';
import { useTheme } from '../../../contexts/ThemeContext';
import { useToast } from '../../../contexts/ToastContext';
import { useUser } from '../../../contexts/UserContext';
import { usePermisos } from '../../../utils/permisosUtils';
import { Empresa } from '../../../types/empresas';

import { Layout, PageHeader, InfoContainer, InfoItem } from '../../../components/ui';
import Typography from '../../../components/ui/Typography';
import Card from '../../../components/ui/Card';
import Button from '../../../components/ui/Button';
import Badge from '../../../components/ui/Badge';
import Chip from '../../../components/ui/Chip';
import Tabs from '../../../components/ui/Tabs';
import SimpleAvatar from '../../../components/ui/SimpleAvatar';
import AnimatedCounter from '../../../components/ui/AnimatedCounter';
import EmpresaSideModal from '../../../components/empresas/EmpresaSideModal';
import { 
  BuildingIcon, 
  UserIcon, 
  MapPinIcon, 
  CalendarIcon, 
  ClockIcon, 
  TrendingUpIcon,
  UsersIcon,
  FileTextIcon,
  ExternalLinkIcon,
  StarIcon,
  ArrowLeftIcon,
  EditIcon,
  BarChartIcon,
  HistoryIcon,
  InfoIcon,
  ConfiguracionesIcon,
  FilterIcon,
  CloseIcon
} from '../../../components/icons';
import { formatearFecha } from '../../../utils/fechas';

import { getChipVariant, getChipText } from '../../../utils/chipUtils';
import Select from '../../../components/ui/Select';
import Input from '../../../components/ui/Input';

// Funciones de utilidad para colores
const getEstadoColor = (estado: string): any => {
  return getChipVariant(estado);
};

const getRiesgoColor = (riesgo: string): any => {
  return getChipVariant(riesgo);
};

  const getRelacionColor = (relacion: string): string => {
    const relacionLower = relacion.toLowerCase();
    if (relacionLower.includes('excelente')) return 'success';
    if (relacionLower.includes('buena')) return 'success';
    if (relacionLower.includes('regular')) return 'warning';
    if (relacionLower.includes('mala') || relacionLower.includes('pobre')) return 'danger';
    return 'default';
  };

interface EstadisticasEmpresa {
  totalParticipaciones: number;
  totalParticipantes: number;
  fechaUltimaParticipacion: string | null;
  investigacionesParticipadas: number;
  duracionTotalSesiones: number;
  participacionesPorMes: { [key: string]: number };
  investigaciones: Array<{
    id: string;
    nombre: string;
    descripcion: string;
    fecha_inicio: string;
    fecha_fin: string;
    estado: string;
    tipo_sesion: string;
    riesgo_automatico: string;
    responsable: { id: string; full_name: string; email: string } | null;
    implementador: { id: string; full_name: string; email: string } | null;
    participaciones: number;
  }>;
}

interface Participante {
  id: string;
  nombre: string;
  rol_empresa_id: string;
  fecha_ultima_participacion: string | null;
  total_participaciones: number;
}

interface EmpresaDetallada extends Empresa {
  estadisticas?: EstadisticasEmpresa;
  participantes?: Participante[];
  productos_nombres?: string[];
}

interface EmpresaVerPageProps {
  empresa: EmpresaDetallada;
}

export default function EmpresaVerPage({ empresa }: EmpresaVerPageProps) {
  const { rolSeleccionado } = useRol();
  const { theme } = useTheme();
  const { showSuccess, showError } = useToast();
  const { userProfile } = useUser();
  const { tienePermiso } = usePermisos();
  const router = useRouter();
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [empresaData, setEmpresaData] = useState<EmpresaDetallada>(empresa);
  const [showEditModal, setShowEditModal] = useState(false);
  const [saving, setSaving] = useState(false);
  const [usuarios, setUsuarios] = useState<any[]>([]);
  const [filterOptions, setFilterOptions] = useState({
    estados: [],
    tamanos: [],
    paises: [],
    kams: [],
    relaciones: [],
    productos: []
  });

  useEffect(() => {
    if (empresa.id) {
      cargarEstadisticas(empresa.id);
    }
    cargarDatosModal();
  }, [empresa.id]);

  const cargarDatosModal = async () => {
    try {
      // Cargar usuarios
      const usuariosRes = await fetch('/api/usuarios');
      const usuariosData = usuariosRes.ok ? await usuariosRes.json() : [];
      
      // Extraer usuarios del objeto si es necesario
      let usuariosArray = [];
      if (Array.isArray(usuariosData)) {
        usuariosArray = usuariosData;
      } else if (usuariosData && usuariosData.usuarios && Array.isArray(usuariosData.usuarios)) {
        usuariosArray = usuariosData.usuarios;
      }
      
      // Cargar cat√°logos - usar APIs correctas
      const estadosRes = await fetch('/api/estados-empresa');
      const estados = estadosRes.ok ? await estadosRes.json() : [];
      
      const tamanosRes = await fetch('/api/tamanos-empresa');
      const tamanos = tamanosRes.ok ? await tamanosRes.json() : [];
      
      const paisesRes = await fetch('/api/paises');
      const paises = paisesRes.ok ? await paisesRes.json() : [];
      
      const relacionesRes = await fetch('/api/relaciones-empresa');
      const relaciones = relacionesRes.ok ? await relacionesRes.json() : [];
      
      const productosRes = await fetch('/api/productos');
      const productos = productosRes.ok ? await productosRes.json() : [];

      const kamsMapped = usuariosArray.map((u: any) => ({ 
        value: u.id, 
        label: u.full_name || u.nombre || u.email || u.correo || 'Sin nombre' 
      }));

      const productosMapped = productos.map((p: any) => ({ 
        value: p.id, 
        label: p.nombre 
      }));

      // Cargar industrias y modalidades
      const industriasRes = await fetch('/api/industrias');
      const industrias = industriasRes.ok ? await industriasRes.json() : [];
      
      const modalidadesRes = await fetch('/api/modalidades');
      const modalidades = modalidadesRes.ok ? await modalidadesRes.json() : [];

      const filterOptionsData = {
        estados: estados.map((e: any) => ({ value: e.id, label: e.nombre })),
        tamanos: tamanos.map((t: any) => ({ value: t.id, label: t.nombre })),
        paises: paises.map((p: any) => ({ value: p.id, label: p.nombre })),
        kams: kamsMapped,
        relaciones: relaciones.map((r: any) => ({ value: r.id, label: r.nombre })),
        productos: productosMapped,
        industrias: industrias.map((i: any) => ({ value: i.id, label: i.nombre })),
        modalidades: modalidades.map((m: any) => ({ value: m.id, label: m.nombre }))
      };

      setUsuarios(usuariosArray);
      setFilterOptions(filterOptionsData);
    } catch (error) {
    }
  };

    const cargarEstadisticas = async (empresaId: string) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/empresas/${empresaId}/estadisticas`);

      if (!response.ok) {
        throw new Error('Error al cargar estad√≠sticas');
      }

      const data = await response.json();

      setEmpresaData({
        ...empresa,
        estadisticas: data.estadisticas,
        participantes: data.participantes
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error desconocido');
    } finally {
      setLoading(false);
    }
  };

  const getEstadoColor = (estado: string) => {
    switch (estado?.toLowerCase()) {
      case 'activa':
      case 'completada':
        return 'success';
      case 'en_progreso':
      case 'en progreso':
        return 'warning';
      case 'pausada':
      case 'cancelada':
        return 'danger';
      default:
        return 'default';
    }
  };

  const getRiesgoColor = (riesgo: string) => {
    switch (riesgo?.toLowerCase()) {
      case 'bajo':
        return 'success';
      case 'medio':
        return 'warning';
      case 'alto':
        return 'danger';
      default:
        return 'default';
    }
  };

  const formatearDuracion = (minutos: number) => {
    const horas = Math.floor(minutos / 60);
    const mins = minutos % 60;
    
    if (horas > 0) {
      return `${horas}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const abrirInvestigacion = (investigacionId: string) => {
    window.open(`/investigaciones/ver/${investigacionId}`, '_blank');
  };

  const handleSaveEmpresa = async (empresaData: any) => {
    setSaving(true);
    try {
      const response = await fetch(`/api/empresas?id=${empresaData.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(empresaData),
      });

      if (response.ok) {
        const updatedEmpresa = await response.json();
        setEmpresaData(prev => ({ ...prev, ...updatedEmpresa }));
        setShowEditModal(false);
        showSuccess('Empresa actualizada', 'Los cambios se han guardado correctamente');
      } else {
        const errorData = await response.json();
        showError(errorData.error || 'Error al actualizar la empresa');
      }
    } catch (error) {
      console.error('Error actualizando empresa:', error);
      showError('Error al actualizar la empresa');
    } finally {
      setSaving(false);
    }
  };

  const [activeTab, setActiveTab] = useState('informacion');

  // Componente de contenido de informaci√≥n
  const InformacionContent = () => {
    console.log('üîç InformacionContent - empresaData:', empresaData);
    console.log('üîç InformacionContent - filterOptions:', filterOptions);
    console.log('üîç InformacionContent - productos_ids:', empresaData.productos_ids);
    console.log('üîç InformacionContent - tamano_nombre:', empresaData.tamano_nombre);
    console.log('üîç InformacionContent - relacion_nombre:', empresaData.relacion_nombre);
    console.log('üîç InformacionContent - kam_nombre:', empresaData.kam_nombre);
    console.log('üîç InformacionContent - pais_nombre:', empresaData.pais_nombre);
    console.log('üîç InformacionContent - industria_nombre:', empresaData.industria_nombre);
    console.log('üîç InformacionContent - modalidad_nombre:', empresaData.modalidad_nombre);

    
    return (
      <div className="space-y-6">


        {/* Descripci√≥n */}
        {empresaData.descripcion && (
          <InfoContainer title="Descripci√≥n" icon={<BuildingIcon className="w-4 h-4" />}>
            <InfoItem 
              label="Descripci√≥n de la empresa" 
              value={empresaData.descripcion}
              size="lg"
            />
          </InfoContainer>
        )}

        {/* Detalles de la empresa */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Detalles */}
          <InfoContainer 
            title="Detalles"
            icon={<UserIcon className="w-4 h-4" />}
          >
            {empresaData.kam_nombre && (
              <InfoItem 
                label="KAM Asignado" 
                value={
                  <div className="flex items-center gap-2">
                    <SimpleAvatar
                      src={empresaData.kam_foto_url}
                      alt={empresaData.kam_nombre}
                      size="sm"
                    />
                    <div>
                      <div>{empresaData.kam_nombre}</div>
                      {empresaData.kam_email && (
                        <div className="text-sm text-gray-500">{empresaData.kam_email}</div>
                      )}
                    </div>
                  </div>
                }
              />
            )}
            {(empresaData.productos_ids?.length > 0 || empresaData.producto_id) && (
              empresaData.productos_ids && empresaData.productos_ids.length > 0 ? (
                <InfoItem 
                  label="Cat√°logo de Productos" 
                  value={
                    <div className="flex flex-wrap gap-2">
                      {empresaData.productos_ids.map((productoId: string, index: number) => {
                        const productoNombre = empresaData.productos_nombres?.[index];
                        return (
                          <Chip key={productoId} variant="outline" size="sm">
                            {productoNombre || `Producto ID: ${productoId}`}
                          </Chip>
                        );
                      })}
                    </div>
                  }
                />
              ) : (
                <InfoItem 
                  label="Producto" 
                  value={
                    <Chip variant="outline">
                      {empresaData.producto_nombre || 'Producto asignado'}
                    </Chip>
                  }
                />
              )
            )}
            <InfoItem 
              label="Fecha de Creaci√≥n" 
              value={formatearFecha(empresaData.created_at || '')}
            />
            <InfoItem 
              label="√öltima Actualizaci√≥n" 
              value={formatearFecha(empresaData.updated_at || '')}
            />

          </InfoContainer>

          {/* Ubicaci√≥n y Clasificaci√≥n */}
          <InfoContainer 
            title="Ubicaci√≥n y Clasificaci√≥n"
            icon={<MapPinIcon className="w-4 h-4" />}
          >
            {empresaData.pais_nombre && (
              <InfoItem 
                label="Pa√≠s" 
                value={empresaData.pais_nombre}
              />
            )}
            {empresaData.tamano_nombre && (
              <InfoItem 
                label="Tama√±o" 
                value={
                  <Chip variant="default">
                    {empresaData.tamano_nombre}
                  </Chip>
                }
              />
            )}
            {empresaData.relacion_nombre && (
              <InfoItem 
                label="Relaci√≥n" 
                value={
                  <Chip variant={getRelacionColor(empresaData.relacion_nombre)}>
                    {empresaData.relacion_nombre}
                  </Chip>
                }
              />
            )}
            {empresaData.industria_nombre && (
              <InfoItem 
                label="Industria" 
                value={empresaData.industria_nombre}
              />
            )}
            {empresaData.modalidad_nombre && (
              <InfoItem 
                label="Modalidad" 
                value={empresaData.modalidad_nombre}
              />
            )}
          </InfoContainer>
        </div>
      </div>
    );
  };

  // Componente de contenido de estad√≠sticas
    const EstadisticasContent = () => {
    return (
      <div className="space-y-6">
      {/* Loading state */}
      {loading && (
        <div className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <Typography variant="body1" className="ml-3">
            Cargando estad√≠sticas...
          </Typography>
        </div>
      )}

      {/* Error state */}
      {error && (
        <Card className="border-red-200 bg-red-50 dark:bg-red-900/20">
          <Typography variant="body1" color="danger">
            Error: {error}
          </Typography>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => empresaData.id && cargarEstadisticas(empresaData.id)}
          >
            Reintentar
          </Button>
        </Card>
      )}

      {/* Estad√≠sticas */}
      {empresaData.estadisticas && (
        <>
          {/* M√©tricas principales */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* Total Participaciones */}
            <Card variant="elevated" padding="md">
              <div className="flex items-center justify-between">
                <div>
                  <Typography variant="h4" weight="bold" className="text-gray-700 dark:text-gray-200">
                    <AnimatedCounter 
                      value={empresaData.estadisticas.totalParticipaciones} 
                      duration={2000}
                      className="text-gray-700 dark:text-gray-200"
                    />
                  </Typography>
                  <Typography variant="body2" color="secondary">
                    Total Participaciones
                  </Typography>
                </div>
                <div className="p-2 rounded-lg bg-gray-50 dark:bg-gray-800/50 ml-4">
                  <TrendingUpIcon className="w-4 h-4 text-gray-500 dark:text-gray-400" />
                </div>
              </div>
            </Card>

            {/* Participantes */}
            <Card variant="elevated" padding="md">
              <div className="flex items-center justify-between">
                <div>
                  <Typography variant="h4" weight="bold" className="text-gray-700 dark:text-gray-200">
                    <AnimatedCounter 
                      value={empresaData.estadisticas.totalParticipantes} 
                      duration={2000}
                      className="text-gray-700 dark:text-gray-200"
                    />
                  </Typography>
                  <Typography variant="body2" color="secondary">
                    Participantes
                  </Typography>
                </div>
                <div className="p-2 rounded-lg bg-gray-50 dark:bg-gray-800/50 ml-4">
                  <UsersIcon className="w-4 h-4 text-gray-500 dark:text-gray-400" />
                </div>
              </div>
            </Card>

            {/* Investigaciones */}
            <Card variant="elevated" padding="md">
              <div className="flex items-center justify-between">
                <div>
                  <Typography variant="h4" weight="bold" className="text-gray-700 dark:text-gray-200">
                    <AnimatedCounter 
                      value={empresaData.estadisticas.investigacionesParticipadas} 
                      duration={2000}
                      className="text-gray-700 dark:text-gray-200"
                    />
                  </Typography>
                  <Typography variant="body2" color="secondary">
                    Investigaciones
                  </Typography>
                </div>
                <div className="p-2 rounded-lg bg-gray-50 dark:bg-gray-800/50 ml-4">
                  <FileTextIcon className="w-4 h-4 text-gray-500 dark:text-gray-400" />
                </div>
              </div>
            </Card>

            {/* Tiempo Total */}
            <Card variant="elevated" padding="md">
              <div className="flex items-center justify-between">
                <div>
                  <Typography variant="h4" weight="bold" className="text-gray-700 dark:text-gray-200">
                    <AnimatedCounter 
                      value={Math.round(empresaData.estadisticas.duracionTotalSesiones / 60)} 
                      duration={2000}
                      className="text-gray-700 dark:text-gray-200"
                      suffix="h"
                    />
                  </Typography>
                  <Typography variant="body2" color="secondary">
                    Tiempo Total
                  </Typography>
                </div>
                <div className="p-2 rounded-lg bg-gray-50 dark:bg-gray-800/50 ml-4">
                  <ClockIcon className="w-4 h-4 text-gray-500 dark:text-gray-400" />
                </div>
              </div>
            </Card>
          </div>

          {/* √öltima participaci√≥n */}
          {empresaData.estadisticas.fechaUltimaParticipacion && (
            <InfoContainer 
              title="√öltima Participaci√≥n"
              icon={<ClockIcon className="w-4 h-4" />}
            >
              <InfoItem 
                label="Fecha de √öltima Participaci√≥n" 
                value={formatearFecha(empresaData.estadisticas.fechaUltimaParticipacion)}
              />
            </InfoContainer>
          )}

          {/* Participaciones por mes */}
          {Object.keys(empresaData.estadisticas.participacionesPorMes).length > 0 && (
            <InfoContainer 
              title="Participaciones por Mes"
              icon={<TrendingUpIcon className="w-4 h-4" />}
            >
              <div className="space-y-3">
                {Object.entries(empresaData.estadisticas.participacionesPorMes)
                  .sort(([a], [b]) => b.localeCompare(a))
                  .slice(0, 12)
                  .map(([mes, cantidad]) => (
                    <div key={mes} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                      <Typography variant="body2" color="secondary">
                        {new Date(mes + '-01').toLocaleDateString('es-ES', { 
                          year: 'numeric', 
                          month: 'long' 
                        })}
                      </Typography>
                      <div className="flex items-center space-x-3">
                        <div className="w-32 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                          <div 
                            className="bg-primary h-2 rounded-full transition-all duration-300"
                            style={{ 
                              width: `${Math.min((cantidad / Math.max(...Object.values(empresaData.estadisticas.participacionesPorMes))) * 100, 100)}%` 
                            }}
                          />
                        </div>
                        <Typography variant="body2" weight="medium" className="w-8 text-right">
                          {cantidad}
                        </Typography>
                      </div>
                    </div>
                  ))}
              </div>
            </InfoContainer>
          )}
        </>
      )}
    </div>
  );

  // Componente de contenido de historial
  const HistorialContent = () => {
    const [showFilterDrawer, setShowFilterDrawer] = useState(false);
    const [filters, setFilters] = useState({
      busqueda: '',
      estado: 'todos',
      fecha_desde: '',
      fecha_hasta: '',
      responsable: 'todos'
    });

    const handleCloseFilters = () => {
      setShowFilterDrawer(false);
    };

    const getActiveFiltersCount = () => {
      let count = 0;
      if (filters.estado !== 'todos') count++;
      if (filters.responsable !== 'todos') count++;
      if (filters.fecha_desde) count++;
      if (filters.fecha_hasta) count++;
      return count;
    };

    return (
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <button
              onClick={() => router.push('/empresas')}
              className="h-8 w-8 p-0 flex items-center justify-center rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
            >
              <ArrowLeftIcon className="w-5 h-5 text-gray-500 dark:text-gray-400" />
            </button>
            <PageHeader
              title={empresaData.nombre || 'Empresa'}
              variant="compact"
              color="green"
              className="mb-0"
              chip={{
                label: empresaData.estado_nombre || 'Sin estado',
                variant: getEstadoColor(empresaData.estado_nombre || ''),
                size: 'sm'
              }}
            />
          </div>

          {/* Acciones principales */}
          <div className="flex flex-wrap gap-3">
            <Button
              variant="outline"
              className="flex items-center gap-2"
              onClick={() => setShowEditModal(true)}
            >
              <EditIcon className="w-4 h-4" />
              Editar
            </Button>
            <Button
              variant="outline"
              className="flex items-center gap-2"
              onClick={() => setShowFilterDrawer(true)}
            >
              <FilterIcon className="w-4 h-4" />
              Filtros
            </Button>
          </div>
        </div>

        {/* Tabs */}
        <Tabs
          tabs={tabs}
          activeTab={activeTab}
          onTabChange={setActiveTab}
          variant="default"
          fullWidth={true}
        />

        {/* Loading state */}
        {loading && (
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <Typography variant="body1" className="ml-3">
              Cargando estad√≠sticas...
            </Typography>
          </div>
        )}

        {/* Error state */}
        {error && (
          <Card className="border-red-200 bg-red-50 dark:bg-red-900/20">
            <Typography variant="body1" color="danger">
              Error: {error}
            </Typography>
            <Button 
              variant="outline" 
              size="sm" 
              className="mt-2"
              onClick={() => empresaData.id && cargarEstadisticas(empresaData.id)}
            >
              Reintentar
            </Button>
          </Card>
        )}

        {/* Investigaciones participadas */}
        {empresaData.estadisticas?.investigaciones && empresaData.estadisticas.investigaciones.length > 0 && (
          <div>
            <Typography variant="h4" weight="semibold" className="mb-4">
              Investigaciones Participadas
            </Typography>
            
            <div className="space-y-4">
              {empresaData.estadisticas.investigaciones.map((investigacion) => (
                <Card key={investigacion.id} className="p-6 hover: transition-colors">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <Typography variant="body1" weight="semibold">
                          {investigacion.nombre}
                        </Typography>
                        <Chip variant={getEstadoColor(investigacion.estado)}>
                          {investigacion.estado}
                        </Chip>
                      </div>
                      
                      {investigacion.descripcion && (
                        <Typography variant="body2" color="secondary" className="mb-3">
                          {investigacion.descripcion}
                        </Typography>
                      )}
                      
                      <div className="flex items-center space-x-6 text-sm text-gray-600 dark:text-gray-400">
                        <div className="flex items-center space-x-1">
                          <CalendarIcon className="w-4 h-4" />
                          <span>{formatearFecha(investigacion.fecha_inicio)}</span>
                        </div>
                        
                        <div className="flex items-center space-x-1">
                          <UsersIcon className="w-4 h-4" />
                          <span>{investigacion.participaciones} participaciones</span>
                        </div>
                        
                        {investigacion.responsable && (
                          <div className="flex items-center space-x-1">
                            <UserIcon className="w-4 h-4" />
                            <span>{investigacion.responsable.full_name}</span>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => abrirInvestigacion(investigacion.id)}
                      className="ml-4"
                    >
                      <ExternalLinkIcon className="w-4 h-4 mr-1" />
                      Ver
                    </Button>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Participantes de la empresa */}
        {empresaData.participantes && empresaData.participantes.length > 0 && (
          <div>
            <Typography variant="h4" weight="semibold" className="mb-4">
              Participantes de la Empresa
            </Typography>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {empresaData.participantes.map((participante) => (
                <Card key={participante.id} className="p-6 hover: transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <Typography variant="body1" weight="medium" className="mb-2">
                        {participante.nombre}
                      </Typography>
                      
                      <div className="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
                        <div className="flex items-center space-x-1">
                          <TrendingUpIcon className="w-4 h-4" />
                          <span>{participante.total_participaciones} participaciones</span>
                        </div>
                        
                        {participante.fecha_ultima_participacion && (
                          <div className="flex items-center space-x-1">
                            <CalendarIcon className="w-4 h-4" />
                            <span>√öltima: {formatearFecha(participante.fecha_ultima_participacion)}</span>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <Chip variant="default">
                      {participante.total_participaciones > 0 ? 'Activo' : 'Sin participaci√≥n'}
                    </Chip>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Estado vac√≠o */}
        {(!empresaData.estadisticas?.investigaciones || empresaData.estadisticas.investigaciones.length === 0) &&
         (!empresaData.participantes || empresaData.participantes.length === 0) && (
          <Card className="text-center py-12">
            <HistoryIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <Typography variant="h5" weight="medium" className="mb-2">
              Sin historial de participaciones
            </Typography>
            <Typography variant="body2" color="secondary">
              Esta empresa a√∫n no ha participado en investigaciones
            </Typography>
          </Card>
        )}

        {/* Drawer de filtros avanzados personalizado para historial */}
        {showFilterDrawer && (
          <div className="fixed inset-0 z-50 overflow-hidden">
            {/* Overlay */}
            <div 
              className="absolute inset-0 bg-black bg-opacity-50 transition-opacity"
              onClick={handleCloseFilters}
            />
            
            {/* Drawer */}
            <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white dark:bg-gray-900 shadow-xl border-l border-gray-200 dark:border-gray-700">
              <div className="flex flex-col h-full">
                {/* Header */}
                <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                  <div className="flex items-center gap-2">
                    <FilterIcon className="w-5 h-5 text-gray-600" />
                    <Typography variant="h5" weight="semibold">
                      Filtros de Historial
                    </Typography>
                    {getActiveFiltersCount() > 0 && (
                      <span className="px-2 py-1 text-xs bg-primary text-white rounded-full">
                        {getActiveFiltersCount()}
                      </span>
                    )}
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleCloseFilters}
                    icon={<CloseIcon className="w-4 h-4" />}
                  />
                </div>
                
                {/* Content */}
                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {/* Estado */}
                  <div>
                    <Typography variant="subtitle2" weight="medium" className="mb-2">
                      Estado de Participaci√≥n
                    </Typography>
                    <Select
                      placeholder="Seleccionar estado..."
                      options={[
                        { value: 'todos', label: 'Todos los estados' },
                        { value: 'Finalizado', label: 'Finalizado' },
                        { value: 'En progreso', label: 'En Progreso' },
                        { value: 'Pendiente', label: 'Pendiente' },
                        { value: 'Pendiente de agendamiento', label: 'Pendiente de Agendamiento' }
                      ]}
                      value={filters.estado}
                      onChange={(value) => setFilters(prev => ({ ...prev, estado: value.toString() }))}
                      fullWidth
                    />
                  </div>
                  
                  {/* Responsable */}
                  <div>
                    <Typography variant="subtitle2" weight="medium" className="mb-2">
                      Responsable
                    </Typography>
                    <Select
                      placeholder="Seleccionar responsable..."
                      options={[
                        { value: 'todos', label: 'Todos los responsables' },
                        ...(empresaData.estadisticas?.investigaciones?.reduce((acc: any[], item: any) => {
                          if (item.responsable && !acc.find(r => r.value === item.responsable.id)) {
                            acc.push({ value: item.responsable.id, label: item.responsable.full_name });
                          }
                        }, []) || [])
                      ]}
                      value={filters.responsable}
                      onChange={(value) => setFilters(prev => ({ ...prev, responsable: value.toString() }))}
                      fullWidth
                    />
                  </div>
                  
                  {/* Fecha desde */}
                  <div>
                    <Typography variant="subtitle2" weight="medium" className="mb-2">
                      Fecha desde
                    </Typography>
                    <Input
                      type="datetime-local"
                      value={filters.fecha_desde}
                      onChange={(e) => setFilters(prev => ({ ...prev, fecha_desde: e.target.value }))}
                      placeholder="Seleccionar fecha..."
                      fullWidth
                    />
                  </div>
                  
                  {/* Fecha hasta */}
                  <div>
                    <Typography variant="subtitle2" weight="medium" className="mb-2">
                      Fecha hasta
                    </Typography>
                    <Input
                      type="datetime-local"
                      value={filters.fecha_hasta}
                      onChange={(e) => setFilters(prev => ({ ...prev, fecha_hasta: e.target.value }))}
                      placeholder="Seleccionar fecha..."
                      fullWidth
                    />
                  </div>
                </div>
                
                {/* Footer */}
                <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      onClick={() => setFilters({
                        busqueda: '',
                        estado: 'todos',
                        fecha_desde: '',
                        fecha_hasta: '',
                        responsable: 'todos'
                      })}
                      className="flex-1"
                    >
                      Limpiar Filtros
                    </Button>
                    <Button
                      variant="primary"
                      onClick={handleCloseFilters}
                      className="flex-1"
                    >
                      Aplicar
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const tabs = [
    {
      id: 'informacion',
      label: 'Informaci√≥n',
      icon: <InfoIcon className="w-4 h-4" />,
      content: <InformacionContent />
    },
    {
      id: 'estadisticas',
      label: 'Estad√≠sticas',
      icon: <BarChartIcon className="w-4 h-4" />,
      content: <EstadisticasContent />
    },
    {
      id: 'historial',
      label: 'Historial de Participaciones',
      icon: <HistoryIcon className="w-4 h-4" />,
      content: <HistorialContent />
    }
  ];

  return (
    <Layout rol={rolSeleccionado}>
      <div className="py-6 px-4">
        <div className="max-w-7xl mx-auto space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <button
                onClick={() => router.push('/empresas')}
                className="h-8 w-8 p-0 flex items-center justify-center rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              >
                <ArrowLeftIcon className="w-5 h-5 text-gray-500 dark:text-gray-400" />
              </button>
              <PageHeader
                title={empresaData.nombre || 'Empresa'}
                variant="compact"
                color="green"
                className="mb-0"
                chip={{
                  label: empresaData.estado_nombre || 'Sin estado',
                  variant: getEstadoColor(empresaData.estado_nombre || ''),
                  size: 'sm'
                }}
              />
            </div>

            {/* Acciones principales */}
            <div className="flex flex-wrap gap-3">
              <Button
                variant="outline"
                className="flex items-center gap-2"
                onClick={() => setShowEditModal(true)}
              >
                <EditIcon className="w-4 h-4" />
                Editar
              </Button>
            </div>
          </div>



          {/* Tabs */}
          <Tabs
            tabs={tabs}
            activeTab={activeTab}
            onTabChange={setActiveTab}
            variant="default"
            fullWidth={true}
          />

          {/* Loading state */}
          {loading && (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
              <Typography variant="body1" className="ml-3">
                Cargando estad√≠sticas...
              </Typography>
            </div>
          )}

          {/* Error state */}
          {error && (
            <Card className="border-red-200 bg-red-50 dark:bg-red-900/20">
              <Typography variant="body1" color="danger">
                Error: {error}
              </Typography>
              <Button 
                variant="outline" 
                size="sm" 
                className="mt-2"
                onClick={() => empresaData.id && cargarEstadisticas(empresaData.id)}
              >
                Reintentar
              </Button>
            </Card>
          )}


        </div>
      </div>

      {/* Modal de edici√≥n */}
      <EmpresaSideModal
        isOpen={showEditModal}
        onClose={() => setShowEditModal(false)}
        onSave={handleSaveEmpresa}
        empresa={empresaData}
        usuarios={usuarios}
        filterOptions={filterOptions}
        loading={saving}
      />
    </Layout>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { id } = context.params || {};

  if (!id || typeof id !== 'string') {
    return {
      notFound: true
    };
  }

  try {
    // Importar directamente la funci√≥n de la API
    const { supabaseServer } = await import('../../../api/supabase');

    // Obtener informaci√≥n b√°sica de la empresa
    const { data: empresa, error: errorEmpresa } = await supabaseServer
      .from('empresas')
      .select('*')
      .eq('id', id)
      .single();

    if (errorEmpresa || !empresa) {
      return {
        notFound: true
      };
    }

    // Obtener datos relacionados por separado
    let kamData = null;
    let paisData = null;
    let estadoData = null;
    let tamanoData = null;
    let relacionData = null;
    let modalidadData = null;
    let industriaData = null;
    let productoData = null;

    if (empresa.kam_id) {
      const { data: kam } = await supabaseServer
        .from('usuarios')
        .select('id, nombre, correo')
        .eq('id', empresa.kam_id)
        .single();
      kamData = kam;
    }

    if (empresa.pais) {
      const { data: pais } = await supabaseServer
        .from('paises')
        .select('id, nombre')
        .eq('id', empresa.pais)
        .single();
      paisData = pais;
    }

    if (empresa.estado) {
      const { data: estado } = await supabaseServer
        .from('estado_empresa')
        .select('id, nombre')
        .eq('id', empresa.estado)
        .single();
      estadoData = estado;
    }

    if (empresa.tama√±o) {
      const { data: tamano } = await supabaseServer
        .from('tamano_empresa')
        .select('id, nombre')
        .eq('id', empresa.tama√±o)
        .single();
      tamanoData = tamano;
    }
    // if (empresa['tama√±o']) {
    //   console.log('üìè SSR - Buscando tama√±o con ID:', empresa['tama√±o']);
    //   const { data: tamano } = await supabaseServer
    //     .from('tamanos')
    //     .select('id, nombre')
    //     .eq('id', empresa['tama√±o'])
    //     .single();
    //   tamanoData = tamano;
    //   console.log('üìè SSR - Tama√±o encontrado:', tamanoData);
    // }

    if (empresa.relacion) {
      const { data: relacion } = await supabaseServer
        .from('relacion_empresa')
        .select('id, nombre')
        .eq('id', empresa.relacion)
        .single();
      relacionData = relacion;
    }

    if (empresa.modalidad) {
      const { data: modalidad } = await supabaseServer
        .from('modalidades')
        .select('id, nombre')
        .eq('id', empresa.modalidad)
        .single();
      modalidadData = modalidad;
    }

    if (empresa.industria) {
      console.log('üè≠ SSR - Buscando industria con ID:', empresa.industria);
      const { data: industria } = await supabaseServer
        .from('industrias')
        .select('id, nombre')
        .eq('id', empresa.industria)
        .single();
      industriaData = industria;
      console.log('üè≠ SSR - Industria encontrada:', industriaData);
    }

    if (empresa.producto_id) {
      const { data: producto } = await supabaseServer
        .from('productos')
        .select('id, nombre')
        .eq('id', empresa.producto_id)
        .single();
      productoData = producto;
    }

    // Obtener productos relacionados desde la tabla de relaci√≥n
    let productosRelacionados = [];
    if (empresa.id) {
      const { data: productosEmpresa } = await supabaseServer
        .from('empresa_productos')
        .select('producto_id')
        .eq('empresa_id', empresa.id);
      
      if (productosEmpresa && productosEmpresa.length > 0) {
        const productoIds = productosEmpresa.map(p => p.producto_id);
        const { data: productos } = await supabaseServer
          .from('productos')
          .select('id, nombre')
          .in('id', productoIds);
        productosRelacionados = productos || [];
      }
    }

    // Formatear respuesta
    const empresaFormateada = {
      id: empresa.id,
      nombre: empresa.nombre,
      descripcion: empresa.descripcion || null,
      kam_id: empresa.kam_id || null,
      kam_nombre: kamData?.nombre || null,
      kam_email: kamData?.correo || null,
      pais_id: empresa.pais || null,
      pais_nombre: paisData?.nombre || null,
      estado_id: empresa.estado || null,
      estado_nombre: estadoData?.nombre || null,
      tamano_id: empresa['tama√±o'] || null,
      tamano_nombre: tamanoData?.nombre || null,
      relacion_id: empresa.relacion || null,
      relacion_nombre: relacionData?.nombre || null,
      modalidad_id: empresa.modalidad || null,
      modalidad_nombre: modalidadData?.nombre || null,
      industria_id: empresa.industria || null,
      industria_nombre: industriaData?.nombre || null,
      producto_id: empresa.producto_id || null,
      producto_nombre: productoData?.nombre || null,
              productos_ids: productosRelacionados.map(p => p.id),
        productos_nombres: productosRelacionados.map(p => p.nombre),
        activo: empresa.activo ?? true,
        created_at: empresa.created_at || null,
        updated_at: empresa.updated_at || null
      };

    console.log(`‚úÖ SSR - Empresa formateada: ${empresaFormateada.nombre}`);
    console.log('üìä SSR - Campos relacionados:', {
      tamano_nombre: empresaFormateada.tamano_nombre,
      relacion_nombre: empresaFormateada.relacion_nombre,
      industria_nombre: empresaFormateada.industria_nombre,
      modalidad_nombre: empresaFormateada.modalidad_nombre,
      productos_ids: empresaFormateada.productos_ids
    });

    return {
      props: {
        empresa: empresaFormateada
      }
    };
  } catch (error) {
    console.error('‚ùå SSR - Error en getServerSideProps:', error);
    return {
      notFound: true
    };
  }
};
