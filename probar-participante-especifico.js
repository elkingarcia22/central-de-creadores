const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables de entorno no encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function probarParticipanteEspecifico() {
  console.log('üß™ === PROBANDO PARTICIPANTE ESPEC√çFICO ===\n');

  try {
    // 1. Buscar el participante "prueba 12344"
    const { data: participantes, error: errorParticipantes } = await supabase
      .from('participantes')
      .select('*')
      .eq('nombre', 'prueba 12344');

    if (errorParticipantes) {
      console.error('‚ùå Error obteniendo participantes:', errorParticipantes);
      return;
    }

    if (!participantes || participantes.length === 0) {
      console.log('‚ùå No se encontr√≥ el participante "prueba 12344"');
      return;
    }

    const participante = participantes[0];
    console.log(`‚úÖ Participante encontrado: ${participante.nombre} (${participante.id})`);

    // 2. Verificar reclutamientos actuales
    const { data: reclutamientos, error: errorReclutamientos } = await supabase
      .from('reclutamientos')
      .select(`
        *,
        estado_agendamiento_cat!inner(nombre)
      `)
      .eq('participantes_id', participante.id);

    if (errorReclutamientos) {
      console.error('‚ùå Error obteniendo reclutamientos:', errorReclutamientos);
      return;
    }

    console.log(`üìä Reclutamientos actuales: ${reclutamientos.length}`);
    const finalizados = reclutamientos.filter(r => r.estado_agendamiento_cat.nombre === 'Finalizado');
    console.log(`üìä Reclutamientos finalizados: ${finalizados.length}`);

    // 3. Verificar historial
    const { data: historial, error: errorHistorial } = await supabase
      .from('historial_participacion_participantes')
      .select('*')
      .eq('participante_id', participante.id);

    if (errorHistorial) {
      console.error('‚ùå Error obteniendo historial:', errorHistorial);
      return;
    }

    console.log(`üìä Registros en historial: ${historial.length}`);
    const completadas = historial.filter(h => h.estado_sesion === 'completada');
    console.log(`üìä Participaciones completadas: ${completadas.length}`);

    // 4. Llamar a la API de estad√≠sticas
    console.log('\nüîç Llamando a la API de estad√≠sticas...');
    const response = await fetch(`http://localhost:3000/api/estadisticas-participante?participante_id=${participante.id}`);
    
    if (response.ok) {
      const estadisticas = await response.json();
      console.log(`‚úÖ Estad√≠sticas de la API:`, estadisticas);
      
      // 5. Verificar si coinciden
      const apiTotal = estadisticas.estadisticas?.total_participaciones || 0;
      if (apiTotal === completadas.length) {
        console.log(`‚úÖ Sincronizaci√≥n exitosa: API=${apiTotal}, Historial=${completadas.length}`);
      } else {
        console.log(`‚ö†Ô∏è  Discrepancia: API=${apiTotal}, Historial=${completadas.length}`);
      }
    } else {
      console.error(`‚ùå Error obteniendo estad√≠sticas: ${response.status} ${response.statusText}`);
    }

    console.log('\n‚úÖ === PRUEBA COMPLETADA ===');

  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

probarParticipanteEspecifico(); 