name: CI/CD Pipeline Central de Creadores

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Verificaci√≥n de c√≥digo y construcci√≥n
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: üì¶ Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üîß Configurar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: üìã Instalar dependencias
      run: npm ci
      
    - name: üîç Verificar TypeScript
      run: npx tsc --noEmit
      
    - name: üßπ Ejecutar ESLint
      run: npm run lint
      continue-on-error: true
      
    - name: üèóÔ∏è Construir aplicaci√≥n
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        
    - name: üì∏ Subir artefactos de construcci√≥n
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: build-files
        path: .next/
        retention-days: 1

  # Job 2: Verificaci√≥n de seguridad
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¶ Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üîí Ejecutar an√°lisis de seguridad
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_TYPESCRIPT_ES: true
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_JSON: true
        VALIDATE_MARKDOWN: true
        
    - name: üõ°Ô∏è An√°lisis de dependencias
      run: |
        npm audit --audit-level=moderate
      continue-on-error: true

  # Job 3: Verificaci√≥n de backups
  backup-verification:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¶ Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: ‚úÖ Verificar archivos de backup cr√≠ticos
      run: |
        echo "üîç Verificando archivos de backup..."
        
        # Lista de archivos cr√≠ticos que deben existir
        CRITICAL_BACKUPS=(
          "BACKUP_ver_reclutamiento_ESTABLE.tsx"
          "BACKUP_AgregarParticipanteModal_ESTABLE.tsx"
          "BACKUP_AsignarAgendamientoModal_ESTABLE.tsx"
          "BACKUP_actualizar_estados_ESTABLE.ts"
          "BACKUP_participantes_reclutamiento_ESTABLE.ts"
          "restore_backup.sh"
          "BACKUP_ESTADO_ACTUAL_PLATAFORMA.md"
          "BACKUP_INSTRUCCIONES_RESTAURACION.md"
          "BACKUP_COMANDOS_CRITICOS.md"
        )
        
        MISSING_FILES=0
        
        for file in "${CRITICAL_BACKUPS[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file - OK"
          else
            echo "‚ùå $file - FALTANTE"
            ((MISSING_FILES++))
          fi
        done
        
        echo "üìä Resumen: $((${#CRITICAL_BACKUPS[@]} - MISSING_FILES))/${#CRITICAL_BACKUPS[@]} archivos de backup presentes"
        
        if [ $MISSING_FILES -gt 0 ]; then
          echo "üö® ADVERTENCIA: Faltan $MISSING_FILES archivos cr√≠ticos de backup"
          exit 1
        else
          echo "üéâ Todos los archivos de backup est√°n presentes"
        fi
        
    - name: üß™ Verificar script de restauraci√≥n
      run: |
        echo "üîß Verificando script de restauraci√≥n..."
        if [ -x "restore_backup.sh" ]; then
          echo "‚úÖ Script de restauraci√≥n es ejecutable"
          ./restore_backup.sh check || echo "‚ö†Ô∏è Script de restauraci√≥n complet√≥ con advertencias"
        else
          echo "‚ùå Script de restauraci√≥n no es ejecutable"
          exit 1
        fi

  # Job 4: Notificaci√≥n de estado
  notify-status:
    needs: [build-and-test, security-scan, backup-verification]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì¢ Estado del pipeline
      run: |
        echo "üîç Estado del Pipeline CI/CD:"
        echo "Build y Test: ${{ needs.build-and-test.result }}"
        echo "An√°lisis de Seguridad: ${{ needs.security-scan.result }}"
        echo "Verificaci√≥n de Backups: ${{ needs.backup-verification.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.backup-verification.result }}" == "success" ]]; then
          echo "üéâ ¬°Pipeline completado exitosamente!"
        else
          echo "‚ö†Ô∏è Pipeline completado con errores o advertencias"
        fi