#!/bin/bash

# MCP Maestro - Script para cambios controlados con Git
# ===================================================

echo "üöÄ MCP Maestro activado"
echo "üìÅ Directorio actual: $(pwd)"
echo "üåø Rama actual: $(git branch --show-current)"
echo ""

# Funci√≥n para mostrar el estado actual
show_status() {
    echo "üìä Estado actual del repositorio:"
    git status --short
    echo ""
}

# Funci√≥n para hacer commit de cambios
commit_changes() {
    local message="$1"
    if [ -z "$message" ]; then
        echo "‚ùå Error: Debes proporcionar un mensaje de commit"
        return 1
    fi
    
    echo "üìù Agregando cambios..."
    git add .
    
    echo "üíæ Haciendo commit con mensaje: '$message'"
    git commit -m "$message"
    
    echo "‚úÖ Commit realizado exitosamente"
    echo ""
}

# Funci√≥n para deshacer cambios
undo_changes() {
    echo "‚ö†Ô∏è  ¬øEst√°s seguro de que quieres deshacer todos los cambios? (y/N)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "üîÑ Deshaciendo cambios..."
        git checkout -- .
        echo "‚úÖ Cambios deshechos"
    else
        echo "‚ùå Operaci√≥n cancelada"
    fi
    echo ""
}

# Funci√≥n para mostrar historial reciente
show_history() {
    echo "üìú Historial reciente de commits:"
    git log --oneline -10
    echo ""
}

# Funci√≥n para hacer push
push_changes() {
    echo "üöÄ Subiendo cambios al repositorio remoto..."
    git push
    echo "‚úÖ Cambios subidos exitosamente"
    echo ""
}

# Funci√≥n para crear una nueva rama
create_branch() {
    local branch_name="$1"
    if [ -z "$branch_name" ]; then
        echo "‚ùå Error: Debes proporcionar un nombre para la rama"
        return 1
    fi
    
    echo "üåø Creando nueva rama: $branch_name"
    git checkout -b "$branch_name"
    echo "‚úÖ Rama '$branch_name' creada y activada"
    echo ""
}

# Funci√≥n para cambiar de rama
switch_branch() {
    local branch_name="$1"
    if [ -z "$branch_name" ]; then
        echo "‚ùå Error: Debes proporcionar el nombre de la rama"
        return 1
    fi
    
    echo "üîÑ Cambiando a rama: $branch_name"
    git checkout "$branch_name"
    echo "‚úÖ Cambiado a rama '$branch_name'"
    echo ""
}

# Funci√≥n para mostrar men√∫ principal
show_menu() {
    echo "üéØ MCP Maestro - Men√∫ Principal"
    echo "================================"
    echo "1. üìä Mostrar estado actual"
    echo "2. üìù Hacer commit de cambios"
    echo "3. üîÑ Deshacer cambios"
    echo "4. üìú Mostrar historial"
    echo "5. üöÄ Hacer push"
    echo "6. üåø Crear nueva rama"
    echo "7. üîÑ Cambiar de rama"
    echo "8. ‚ùå Salir"
    echo ""
}

# Funci√≥n principal
main() {
    while true; do
        show_menu
        read -p "Selecciona una opci√≥n (1-8): " choice
        
        case $choice in
            1)
                show_status
                ;;
            2)
                read -p "üìù Ingresa el mensaje del commit: " commit_message
                commit_changes "$commit_message"
                ;;
            3)
                undo_changes
                ;;
            4)
                show_history
                ;;
            5)
                push_changes
                ;;
            6)
                read -p "üåø Ingresa el nombre de la nueva rama: " new_branch
                create_branch "$new_branch"
                ;;
            7)
                read -p "üîÑ Ingresa el nombre de la rama: " branch_name
                switch_branch "$branch_name"
                ;;
            8)
                echo "üëã ¬°Hasta luego!"
                exit 0
                ;;
            *)
                echo "‚ùå Opci√≥n inv√°lida. Por favor selecciona 1-8."
                echo ""
                ;;
        esac
        
        read -p "Presiona Enter para continuar..."
        clear
    done
}

# Verificar si estamos en un repositorio git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Error: No est√°s en un repositorio git"
    exit 1
fi

# Ejecutar funci√≥n principal
main
